Throwable 类常用方法

| public String getMessage()    | 返回此throwable的详细消息字符串。 |
| public String toString()      | 返回此 throwable 的简短描述       |
| public void printStackTrace() | 打印异常的堆栈的跟踪信息          |

Throwable 是所有异常和错误的父类
   Error  错误 描述了java运行时系统内部错误和资源耗尽错误
      OutOfMemoryError       堆内存溢出错误
      StackOverflowError     栈内存溢出错误

   Exception  异常
      RuntimeException
         ArithmeticException
         ArrayIndexOutOfBoundsException
         ClassCastException
         NullPointerException
      ParseException
      IOException

运行期异常  继承了 RuntimeException 的异常
编译期异常  没有继承 RuntimeException 的异常，程序员要处理这种异常,编译时异常必须处理，否则无法通过编译

Error与Exception的区别：
1、 我开着车走在路上，一头猪冲在路中间，我刹车，这叫一个异常。
2、 我开着车在路上，发动机坏了，我停车，这叫错误。发动机什么时候坏？我们普通司机能管吗？不能。发动机什么时候坏是汽车厂发动机制造商的事。


声明异常
  throws 声明异常 用在方法的声明上，告诉方法的使用者，如果调用这个方法，要小心，可能会出异常
  throws ParseException, IOException
  throws 后面可以跟一到多个异常类的名称，多个使用逗号分隔
   调用了有异常声明的方法
    1.如果方法声明是的编译期异常，调用该方法的时候，必须处理该异常
    2.如果方法声明的是运行期异常，调用该方法的时候，可以不处理异常

处理异常：
  方式一：不管
    调用的方法也声明被调用的方法声明的异常
  方式二：捕获异常
  try {
    // 可能出现异常的代码
  } catch(异常类 e) {
    // 处理异常，出现异常了执行 catch 块中的代码
  } finally {
    // 无论是否出现异常，都执行
  }

抛出异常 throw
  throw 关键字用在方法的内部，主动抛出一个异常


使用异常的注意事项

    1.多个异常使用捕获又该如何处理呢？
        1. 多个异常分别处理。
        2. 多个异常一次捕获，多次处理。
        3. 多个异常一次捕获一次处理。
    2.运行时异常被抛出可以不处理。即不捕获也不声明抛出。

    3.子类方法声明的异常范围不能超过父类方法声明范围
      * 如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。
      * 父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出

自定义异常

  1. 自定义一个编译期异常: 自定义类 并继承于 java.lang.Exception。
  2. 自定义一个运行时期的异常类:自定义类 并继承于 java.lang.RuntimeException。











