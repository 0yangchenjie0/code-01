数据类型
   基本数据类型
      byte、short、int、long
      float、double
      boolean、[true、false]
      char
   引用数据类型
      类
         字符串   String str = "";
      数组
思考：
  int i = 100; // 变量只能存储一个内容
  如何在一个变量上存储一组内容

1.数组的概念和基本操作
 数组用来存储数据类型相同，数据个数固定的一组数据。

 1.1 如何创建一个数组
    动态创建数组
        数据类型[] 数组的名称 = new 数据类型[数组长度];（建议使用）
        // 或者
        数据类型 数组名[] = new 数据类型[数组长度];
    静态创建数组
        数据类型[] 数组名 = new 数据类型[]{元素1, 元素2, 元素3，…};
        简化写法：
        数据类型[] 数组名 = {元素1, 元素2, 元素3，…};
        注意：不能使用该简化方式给数组再次赋值
            数组名 = {元素1, 元素2, 元素3，…};
    总结：
    1、 数组类型可以是任何数据类型，包括基本类型和引用类型，例如String[] 和 float[]。
    2、 数组中存放元素的类型，必须是创建数组时指定的类型，不允许出现混合类型。
    3、 创建一个数组时，必须指定数组长度，创建成功数组的大小就不可以改变了。
    特点：长度固定、数据类型固定

 1.2 数组的基本操作
    数组的赋值和取值
        数组中的数据是存储在一块连续的内存空间的，数组中元素是通过索引（下标）来定位的

        数组中的元素，我们可以通过下标（索引）来访问，索引从0开始。
        数组索引的取值范围为：[0，数组长度-1]，如果超出索引范围来操作数组元素，会抛出 ArrayIndexOutOfBoundsException 异常。
        赋值：
           1.创建数组的时候，直接赋值
               int[] arr = {1,2,3};
           2.创建数组完成后，再给数组中的元素赋值
               int[] arr = new int[3];
               arr[0] = 100;
               arr[1] = 200;
               arr[2] = 300;
               arr[4] = 400; // ArrayIndexOutOfBoundsException
        取值：
           数组名称[下标];
           arr[0]

        获取数组长度
           数组名称.length;
           arr.length

        数组的默认初始化
            数组是引用类型，只要数组一经分配空间，那么数组中的每个元素都会被隐式的设置一个默认值。
            以下是针对不同数据类型的默认值：
            1、整数类型（byte、short、int、long）的默认值为 0。
            2、浮点型（float、double）的默认值为 0.0。
            3、字符型（char）的默认为  '\u0000'。
            4、布尔类型的默认值为 false。
            5、引用类型的默认值为 null  (null就是空对象)。

        数组的遍历

          需求：初始化一个数组，存储1-100，100个元素
          // 定义一个int类型的数组，长度是100
          int[] arr = new int[100];
          for (int i = 0; i < arr.length; i++) {
              // 给数组赋值
              arr[i] = i + 1;
              System.out.println(arr[i]);
          }

          通过增强for循环遍历数组  foreach

            foreach 是 Java SE 5.0 增加了一种功能增强的循环结构，
            可以用来一次处理数组中的每个元素（其他类型的元素集合亦可）而不必为指定下标值而分心。

            增强的 foreach 循环的语法格式为：
                for(数据类型 变量 : 数组或集合的名称) {
                   // 访问每次迭代到的 变量
                }

            优点：语法简洁。
            缺点：相比较普通for循环，增强for循环无法获得数组下标。


         通过索引操作数组原理
















