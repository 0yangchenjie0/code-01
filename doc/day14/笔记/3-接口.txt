接口<规范>：
 USB接口
 可插拔性

 接口是功能的集合，同样可看做是一种数据类型，是比抽象类更为抽象的类。
 接口只描述所应该具备的方法，并没有具体实现，具体的实现由接口的实现类(相当于接口的子类)来完成
 这样 将功能的定义与实现分离，优化了程序设计

接口定义
    public interface 接口名 {

        数据类型 静态常量;

        返回值类型 抽象方法名称(参数类型 参数名称,...);

        static 返回值类型 静态方法名称(参数类型 参数名称,...){

        }

        default 返回值类型  普通成员方法名称(参数类型 参数名称,...){

        }
    }
    JDK7 之前
    1.接口是更抽象的抽象类      	              默认被 abstract 修饰  public **abstract** interface Phone {}
    2.接口中的成员变量都是静态常量    	默认被 public static final 修饰变量  可以通过接口直接访问 Phone.I
    3.接口中的方法都是抽象方法  		      默认被 public abstract 修饰
    4.接口没有构造方法、不能被实例化
    JDK8 之后
    6.接口中也可以有具体实现的非静态方法，需要使用default关键字修饰
    7.接口中也可以有静态的成员方法                默认使用public static 修饰
接口实现
    1.子类实现接口，使用 implements 关键字
    2.可以通过接口名称直接访问接口中的静态常量和静态方法
    3.子类如果不是抽象类，必须实现接口中所有的抽象方法
    4.子类可以访问接口中定义的静态常量
    5.接口中的静态成员方法，子类和子类的对象不能访问
    6.接口中default修饰的普通成员方法，子类可以继承或重写

    一个类可以实现多个接口
    一个接口可以继承多个接口
    一个类可以继承父类的同时实现一到多个接口

接口的优点：
    - 接口的出现扩展了功能
    - 接口为编程提供了规则
    - 接口的出现降 低了耦合性，即设备与设备之间实现了解耦   高内聚 低耦合
    - 接口的出现方便后期使用和维护，一方是在使用接口（如电脑），一方在实现接口（插在插口上的设备）。
      例如：笔记本使用这个规则（接口），电脑外围设备实现这个规则（接口）。


接口的设计原则
    单一职责
    面向接口的编程

接口和抽象类的区别

   相同点:
   - 都位于继承的顶端,用于被其他类实现或继承;
   - 都不能直接实例化对象;
   - 都包含抽象方法,子类都必须覆写这些抽象方法后才可以创建对象;

   区别:
   - 抽象类为部分方法提供实现,避免子类重复实现这些方法,提高代码重用性;
     - JDK8 以后接口中使用 defualt 关键字修饰的方法也可以实现这个需求

   - 接口只能包含抽象方法，提高程序可扩展性;
     - JDK7之前适用 JDK8之后接口中可以有静态方法和被 default 修饰的普通方法

   - 一个类只能继承一个直接父类,却可以实现多个接口;
     - 接口弥补了Java的单继承

   注意
     JDK8 以后接口可以实现抽象类的所有功能

   二者的选用
     优先使用接口, 尽量少用抽象类





















