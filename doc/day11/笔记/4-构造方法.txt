思考：
  Person person = new Person(); // 对象的初始化工作没全部完成
  // 给成员变量赋值
  person.name = "jack";
  person.age = 18;

  能不能在创建对象的同时，就完成对象成员变量的初始化工作呢？可以

构造方法：
  构造方法也叫做构造器或构造函数，构造方法在创建对象的时候调用，作用是完成对象的初始化，比如成员变量的赋值。
  构造方法方法名称和类名一致
   * 构造方法没有返回值，也不需要声明返回值类型
   * 构造方法不能通过 对象.方法名称() 的方式调用，只能在创建对象的时候被调用
   * 类中不定义任何构造方法，编译的时候编译器会生成一个无参构造方法
   * 如何类中定义了带参数的构造方法，编译器不会再生成无参构造方法,如果想使用无参构造创建对象，需要定义出来无参构造
   回忆方法重载：同一个类中，方法名称相同，参数类型或参数个数不同的一组方法，构成方法重载
   构造方法的重载
          // 无参构造
          User() {

          }
          // 带参数的构造
          User(String username, String password) {
              // 将传递进来的参数赋值给成员变量
              this.username = username; // 将参数username的值，赋值给当前对象的 username
              this.password = password;
          }
构造方法和成员方法区别
    区别一：定义格式区别
       构造方法的方法名要与类名一样，并且不用定义返回值类型。
       成员方法的方法名只需符合标识符的规范，必须定义返回值类型。
    区别二：调用时期区别
        构造方法在实例化对象的时候调用。
        成员方法在对象创建成功之后才能调用。

    区别三：调用方式区别
        构造方法通过new关键字来调用。new 类名(参数1，参数2)
        成员方法通过对象来调用。对象名称.成员方法(参数1，参数2);

    区别四：调用次数区别
        构造方法只能调用一次，在创建对象的时候调用。
        成员方法可以调用任意多次！

    注意：构造方法中可以调用成员方法，成员方法中不能调用构造方法。

this 关键字
   this 表示当前对象

   当创建一个对象成功后，虚拟机（JVM）会动态的分配一个引用，该引用指向的就是当前对象，这个引用的名字叫做 this。

   User user = new User();
   user.xx

   class User {

   }

   this 关键字的作用：
   - 解决局部变量和成员变量同名问题
     this.成员变量 访问成变量
   - 访问当前对象的成员
   - 重载的构造方法之间互调

this 总结：

 访问成员变量

     局部变量和成员变量同名的情况下，成员变量会被屏蔽，此时要访问成员变量则需要用 “this.成员变量名” 的方式来引用成员变量。
     当然，在没有同名的情况下，可以直接使用“成员变量名”来调用成员变量，也就是省略this关键字，编译器会自动帮我们加上。

 调用成员方法
     调用成员方法时可以使用“this.成员方法()”的方式来调用成员方法，当然也可以使用“成员方法()”的方式来调用，也就是省略 this 关键字，
     编译器会自动帮我们加上。

 构造方法之间互调
    在一个类的构造方法内部，也可以使用 this() 关键字调用其它的构造方法，这样可以降低代码的重复，也可以使所有的构造方法保持统一，
    这样方便以后的代码修改和维护，也方便代码的阅读。
    注意事项：
    1、 this(参数列表); 只能用在构造方法中，且它必须是第一行语句！
    2、 this(参数列表) 在编译时根据参数签名来选择调用对应构造方法！
    3、 一个构造方法中只能调用一次另一个构造方法









