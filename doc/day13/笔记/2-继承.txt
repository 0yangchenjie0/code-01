面向对象编程有三大特性：封装、继承、多态。

继承：
  1. 封装将属性和方法封装到一个类中
  2. 继承实现代码的重用，相同的代码不需要重复的编写

  继承的概念：子类拥有父类的所有方法和属性

  - 子类继承自父类，可以直接使用父类中已经封装好的方法，不需要再次开发
  - 子类中应该根据职责，封装子类特有的属性和方法

  语法
      public class 子类 extends 父类 {

      }

      class B extends A {

      }
  继承的优点和特点
     优点：
     - 继承的出现提高了代码的复用性，提高软件开发效率。
     - 继承的出现让类与类之间产生了关系，提供了多态的前提。
     特点：
     1、Java中，类只支持单继承，不允许多继承，也就是说一个类只能有一个直接父类，例如下面这种情况是不合法的。
     2、多个类可以继承一个父类
     3、Java中，多层继承是可以的，即一个类的父类可以再去继承另外的父类

  继承中成员变量的关系

     - 不同名的变量：
       - 子类直接继承使用
     - 同名的变量：
       - 默认访问的是子类自己的成员变量,
       - 访问父类中的同名变量，使用 super.成员变量
     - 私有的成员变量不能被子类访问

  继承中成员方法的关系
  - 不同名的方法：
    - 子类直接继承使用

  - 同名的方法：
    - 默认访问的是子类自己的成员方法，
    - 访问父类中的同名方法，使用 super.成员方法()

  方法的重写
    子类继承父类的时候，如果父类的某个方法不能满足子类的需求，这个时候子类可以重写父类的方法

    @Override  注解方法重写的标识
    如果方法上被标注了 @Override，表示该方法重写了父类的方法

    - 方法重写(override)： @Override
      - 指在子父类中，出现了方法声明相同的情况，也叫做方法覆盖，方法复写
    - 方法重写的注意事项：
      - 子类的方法声明要与父类相同
        - 方法名相同
        - 参数顺序，参数个数，参数类型都相同
      - 子类重写父类的方法，方法的权限修饰符不能比父类的更低
        - 后续讲解
      - 父类的私有方法，子类不能继承，子类如果出现该私有方法相同定义的方法，该方法是子类自己的方法，不是方法重写

   方法重写(override) 和 方法重载(overload)

    方法重载：在同一个类中，如果出现方法名相同，参数类型或参数个数不同的一组方法，这些方法构成方法重载
    方法重写：在父子类中，如果子类出现了和父类 方法名相同，参数顺序、参数个数，参数类型都相同的方法，称为子类重写父类的方法。

  继承中构造方法的关系
      创建子类对象的时候，调用子类的构造方法
        - 在子类构造方法的第一句是调用父类的构造方法super(),
        - 或者调用重载的构造方法this()




















